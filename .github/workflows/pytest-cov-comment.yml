
name: CI Pytest
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  # New commit on branch cancels running workflows of the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pytest:
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [macos-latest, windows-latest, ubuntu-latest]
            python-version: ['3.9', '3.8', '3.7']
            exclude:
              - os: ubuntu-latest
                python-version: '3.9'
    steps:
    - uses: actions/checkout@v3

    ### Caching
    - name: Load cached $HOME/.local (cache poetry)
      id: cached-poetry-install
      uses: actions/cache@v2.1.6
      with:
        path: ~/.local
        key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/pytest.yml') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2.1.6
      with:
        path: |
          .venv
          poetry.lock
        # Cache the complete venv dir for a given os, python version, pyproject.toml
        key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.github/workflows/cache_version') }}

    ### Installing
    - name: Install Project
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install

    ### Run tests
    - name: Source .venv
      run: |
        source $VENV
    - name: Run and write pytest
      run: |
        pytest -n 2 --cov=dacy --cov-report term-missing

  pytest-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    ### Caching
    - name: Load cached $HOME/.local (cache poetry)
      id: cached-poetry-install
      uses: actions/cache@v2.1.6
      with:
        path: ~/.local
        key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/pytest.yml') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2.1.6
      with:
        path: |
          .venv
          poetry.lock
        # Cache the complete venv dir for a given os, python version, pyproject.toml
        key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.github/workflows/cache_version') }}

    ### Installing
    - name: Install Project
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install

    ### Run tests
    - name: Source .venv
      run: |
        source $VENV
        echo $(which python)
        echo $(poetry show pytest)
    - name: Run and write pytest
      run: |
        set -o pipefail
        poetry run pytest --cov=dacy --cov-report term-missing | tee pytest-coverage.txt
    
    ### Create cov comment
    - name: Pytest coverage comment
      id: coverage-comment
      uses: MishaKav/pytest-coverage-comment@v1.1.28
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        github-token: ${{ secrets.SPHINX_DOCUMENTATION }}

    - name: Check the output coverage
      if: ${{ github.event_name == 'push' }}
      run: |
        echo "Coverage Report - ${{ steps.coverage-comment.outputs.coverage }}"
        echo "Coverage Color - ${{ steps.coverage-comment.outputs.color }}"
    - name: Create the Badge
      uses: schneegans/dynamic-badges-action@v1.3.0
      with:
        auth: ${{ secrets.PYTEST_COVERAGE_COMMENT }}
        gistID: af8637d94475ea8bcb6b6a03c4fbcd3e
        filename: badge-dacy-pytest-coverage.json
        label: Coverage
        message: ${{ steps.coverage-comment.outputs.coverage }}
        color: ${{ steps.coverage-comment.outputs.color }}
        namedLogo: python
